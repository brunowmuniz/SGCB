package br.com.casabemestilo.model;


import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.CascadeType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.Min;

import org.hibernate.annotations.BatchSize;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.ForeignKey;

/**
 * Ocproduto generated by hbm2java
 */
@Entity
@Table(name = "ocproduto", catalog = "blankerc_sgcb")
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class Ocproduto implements java.io.Serializable {

	private Integer id;
	private Status status;
	private Produto produto;
	private Oc oc = new Oc();
	private String tiposaida;
	private Integer quantidade;
	private Float valorsugerido;
	private Float valorunitario;
	private Float valortotal;
	private List<Pedidoproduto> pedidoprodutos;
	private Set montagems = new HashSet(0);
	private Set fretes = new HashSet(0);
	private Set assistenciatecnicas = new HashSet(0);

	public Ocproduto() {
	}

	public Ocproduto(Status status, Produto produto, Oc oc) {
		this.status = status;
		this.produto = produto;
		this.oc = oc;
	}

	public Ocproduto(Status status, Produto produto, Oc oc, String tiposaida,
			Set montagems, Set fretes, Set assistenciatecnicas, Integer quantidade) {
		this.status = status;
		this.produto = produto;
		this.oc = oc;
		this.tiposaida = tiposaida;
		this.montagems = montagems;
		this.fretes = fretes;
		this.assistenciatecnicas = assistenciatecnicas;
		this.quantidade = quantidade;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne
	@JoinColumn(name = "status", nullable = false)	
	public Status getStatus() {
		if(this.status == null){
			this.status = new Status();
		}
		return this.status;
	}

	public void setStatus(Status status) {
		this.status = status;
	}

	@ManyToOne
	@JoinColumn(name = "produto", nullable = false)
	public Produto getProduto() {
		if(this.produto == null){
			produto = new Produto();
		}
		return this.produto;
	}

	public void setProduto(Produto produto) {
		this.produto = produto;
	}

	@ManyToOne
	@JoinColumn(name = "oc", nullable = false)
	public Oc getOc() {
		if(this.oc == null){
			oc = new Oc();
		}
		return this.oc;
	}

	public void setOc(Oc oc) {
		this.oc = oc;
	}

	@Column(name = "tiposaida")
	public String getTiposaida() {
		return this.tiposaida;
	}

	public void setTiposaida(String tiposaida) {
		this.tiposaida = tiposaida;
	}

	@OneToMany(targetEntity = Montagem.class, mappedBy = "ocproduto")
	public Set getMontagems() {
		return this.montagems;
	}

	public void setMontagems(Set montagems) {
		this.montagems = montagems;
	}

	@OneToMany(targetEntity = Frete.class, mappedBy = "ocproduto")
	public Set getFretes() {
		return this.fretes;
	}

	public void setFretes(Set fretes) {
		this.fretes = fretes;
	}

	@OneToMany(targetEntity = Assistenciatecnica.class,mappedBy = "ocproduto")
	public Set getAssistenciatecnicas() {
		return this.assistenciatecnicas;
	}

	public void setAssistenciatecnicas(Set assistenciatecnicas) {
		this.assistenciatecnicas = assistenciatecnicas;
	}


	@Column(name = "quantidade", length = 3)
	@Min(value=1)
	public Integer getQuantidade() {
		if(quantidade == null){
			quantidade = 1;
		}
		return quantidade;
	}

	public void setQuantidade(Integer quantidade) {
		this.quantidade = quantidade;
	}
	
	@Column(name="valorsugerido", scale=6, precision=2)
	public Float getValorsugerido() {
		return valorsugerido;
	}
	
	public void setValorsugerido(Float valorsugerido) {
		this.valorsugerido = valorsugerido;
	}

	@Column(name="valorunitario", scale=6, precision=2)
	public Float getValorunitario() {
		if(valorunitario == null){
			valorunitario = new Float(0.00);
		}
		return valorunitario;
	}

	public void setValorunitario(Float valorunitario) {
		this.valorunitario = valorunitario;
	}

	@Column(name="valortotal", scale=6, precision=2)
	public Float getValortotal() {		
		if(getId() == null && valortotal == null){
			valortotal = new Float(0.00);
		}
		return valortotal;
	}

	public void setValortotal(Float valortotal) {		
		if((valortotal == 0.00 || this.valortotal != valortotal) && getId() == null){
			this.valortotal = getValorunitario() * getQuantidade();
		}else{
			this.valortotal = valortotal;
		}
		
	}
	
	@OneToMany(targetEntity = Pedidoproduto.class, mappedBy = "ocproduto", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	public List<Pedidoproduto> getPedidoprodutos() {
		return pedidoprodutos;
	}

	public void setPedidoprodutos(List<Pedidoproduto> pedidoprodutos) {
		this.pedidoprodutos = pedidoprodutos;
		for(Pedidoproduto pedidoproduto : pedidoprodutos){
			pedidoproduto.setOcproduto(this);
		}
		this.pedidoprodutos = pedidoprodutos;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime
				* result
				+ ((assistenciatecnicas == null) ? 0 : assistenciatecnicas
						.hashCode());
		result = prime * result + ((fretes == null) ? 0 : fretes.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result
				+ ((montagems == null) ? 0 : montagems.hashCode());
		result = prime * result + ((oc == null) ? 0 : oc.hashCode());
		result = prime * result + ((produto == null) ? 0 : produto.hashCode());
		result = prime * result
				+ ((quantidade == null) ? 0 : quantidade.hashCode());
		result = prime * result + ((status == null) ? 0 : status.hashCode());
		result = prime * result
				+ ((tiposaida == null) ? 0 : tiposaida.hashCode());
		result = prime * result
				+ ((valorsugerido == null) ? 0 : valorsugerido.hashCode());
		result = prime * result
				+ ((valortotal == null) ? 0 : valortotal.hashCode());
		result = prime * result
				+ ((valorunitario == null) ? 0 : valorunitario.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Ocproduto other = (Ocproduto) obj;
		if (assistenciatecnicas == null) {
			if (other.assistenciatecnicas != null)
				return false;
		} else if (!assistenciatecnicas.equals(other.assistenciatecnicas))
			return false;
		if (fretes == null) {
			if (other.fretes != null)
				return false;
		} else if (!fretes.equals(other.fretes))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (montagems == null) {
			if (other.montagems != null)
				return false;
		} else if (!montagems.equals(other.montagems))
			return false;
		if (oc == null) {
			if (other.oc != null)
				return false;
		} else if (!oc.equals(other.oc))
			return false;
		if (produto == null) {
			if (other.produto != null)
				return false;
		} else if (!produto.equals(other.produto))
			return false;
		if (quantidade == null) {
			if (other.quantidade != null)
				return false;
		} else if (!quantidade.equals(other.quantidade))
			return false;
		if (status == null) {
			if (other.status != null)
				return false;
		} else if (!status.equals(other.status))
			return false;
		if (tiposaida == null) {
			if (other.tiposaida != null)
				return false;
		} else if (!tiposaida.equals(other.tiposaida))
			return false;
		if (valorsugerido == null) {
			if (other.valorsugerido != null)
				return false;
		} else if (!valorsugerido.equals(other.valorsugerido))
			return false;
		if (valortotal == null) {
			if (other.valortotal != null)
				return false;
		} else if (!valortotal.equals(other.valortotal))
			return false;
		if (valorunitario == null) {
			if (other.valorunitario != null)
				return false;
		} else if (!valorunitario.equals(other.valorunitario))
			return false;
		return true;
	}
	
	
}
