package br.com.casabemestilo.model;

// Generated 24/05/2013 18:36:37 by Hibernate Tools 4.0.0

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.CascadeType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

/**
 * Pagamento generated by hbm2java
 */
@Entity
@Table(name = "pagamento")
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class Pagamento implements java.io.Serializable {

	
	private static final long serialVersionUID = 1L;
	private Integer id;
	private CondicoesPagamento condicoesPagamento;
	private Oc oc;
	private PagamentoAvulso pagamentoAvulso;
	private Date datalancamento;
	private List<Parcela> parcelas = new ArrayList<Parcela>();
	private Boolean deleted;
	private Float valor;
	private Cliente cliente;
	private Banco banco;
	private String cvCartao;
	

	public Pagamento() {
	}

	public Pagamento(CondicoesPagamento condicoesPagamento, Oc oc, Date datalancamento) {
		this.condicoesPagamento = condicoesPagamento;
		this.oc = oc;
		this.datalancamento = datalancamento;
	}
	
	public Pagamento(CondicoesPagamento condicoesPagamento, Double valor){
		this.valor = valor.floatValue();
		this.condicoesPagamento = condicoesPagamento;
	}

	public Pagamento(CondicoesPagamento condicoesPagamento, Oc oc, Date datalancamento,
			List<Parcela> parcelas, Boolean deleted, Float valor) {
		this.condicoesPagamento = condicoesPagamento;
		this.oc = oc;
		this.datalancamento = datalancamento;
		this.parcelas = parcelas;
		this.deleted = deleted;
		this.valor = valor;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne
	@JoinColumn(name = "condicoesPagamento", nullable = false)
	public CondicoesPagamento getCondicoesPagamento() {
		if(condicoesPagamento == null){
			condicoesPagamento = new CondicoesPagamento();
		}
		return this.condicoesPagamento;
	}

	public void setCondicoesPagamento(CondicoesPagamento condicoesPagamento) {
		this.condicoesPagamento = condicoesPagamento;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "oc")
	public Oc getOc() {
		return this.oc;
	}

	public void setOc(Oc oc) {
		this.oc = oc;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "datalancamento", nullable = false, length = 10)
	public Date getDatalancamento() {
		if(this.datalancamento == null){
			this.datalancamento = new Date();
		}
		return this.datalancamento;
	}

	public void setDatalancamento(Date datalancamento) {
		this.datalancamento = datalancamento;
	}

	@OneToMany(targetEntity = Parcela.class, mappedBy = "pagamento", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	public List<Parcela> getParcelas() {
		return this.parcelas;
	}

	public void setParcelas(List<Parcela> parcelas) {
		this.parcelas = parcelas;
		for(Parcela parcela : parcelas){
			parcela.setPagamento(this);
		}
		this.parcelas = parcelas;
	}

	@Column(name = "deleted")
	public Boolean getDeleted() {
		if(this.deleted == null){
			deleted = false;
		}
		return deleted;
	}

	public void setDeleted(Boolean deleted) {
		this.deleted = deleted;
	}

	@Column(name = "valor", nullable = false, scale = 6, precision = 2)
	public Float getValor() {
		if(this.valor == null){
			valor = new Float(0);
		}
		return valor;
	}

	public void setValor(Float valor) {
		this.valor = valor;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name="cliente")
	public Cliente getCliente() {
		return cliente;
	}

	public void setCliente(Cliente cliente) {
		this.cliente = cliente;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name="banco")
	public Banco getBanco() {
		return banco;
	}

	public void setBanco(Banco banco) {
		this.banco = banco;
	}

	@Column(name="cvcartao", nullable = true)
	public String getCvCartao() {
		return cvCartao;
	}

	public void setCvCartao(String cvCartao) {
		this.cvCartao = cvCartao;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name="pagamaentoavulso")
	public PagamentoAvulso getPagamentoAvulso() {
		return pagamentoAvulso;
	}

	public void setPagamentoAvulso(PagamentoAvulso pagamentoAvulso) {
		this.pagamentoAvulso = pagamentoAvulso;
	}

	@Override
	public String toString() {
		return "Pagamento [id=" + id + ", datalancamento=" + datalancamento
				+ ", parcelas=" + parcelas + ", deleted=" + deleted
				+ ", valor=" + valor + "]";
	}

	
	
	
}
